generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                 Int              @id @default(autoincrement())
  email              String           @unique
  username           String           @db.VarChar(255)
  firstname          String           @db.VarChar(255)
  lastname           String           @db.VarChar(255)
  avatarUrl          String?          @db.VarChar(255)
  address            String?          @db.VarChar(255)
  phone              String?          @db.VarChar(40)
  city               String?          @db.VarChar(50)
  isActive           Boolean          @default(true)
  isOrganization     Boolean          @default(false)
  nip                String?
  rating             Float            @default(0.0)
  lastLogin          DateTime         @updatedAt
  createdAt          DateTime         @default(now())
  itemNeed           itemNeed[]
  itemListing        itemListing[]
  messageSender      message[]        @relation("sender")
  messageRecipient   message[]        @relation("recipient")
  favouriteUsersList favouriteUsers[] @relation("user")
  favouriteUsers     favouriteUsers[] @relation("favouriteUser")
  favouriteItems     favouriteItems[]
}

model itemBrand {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  item      item[]
}

model itemType {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  item      item[]
}

model item {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  description    String
  brandId        Int
  typeId         Int
  city           String           @db.Varchar(255)
  expirationDate DateTime?
  imageUrl       String
  itemBrand      itemBrand        @relation(fields: [brandId], references: [id], onDelete: Cascade)
  itemType       itemType         @relation(fields: [typeId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  itemNeed       itemNeed[]
  itemListing    itemListing[]
  favouriteItems favouriteItems[]
}

model itemNeed {
  id        Int      @id @default(autoincrement())
  amount    Int
  itemId    Int
  userId    Int
  item      item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

}

model itemListing {
  id        Int      @id @default(autoincrement())
  price     Int
  userId    Int
  itemId    Int
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  item      item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model message {
  id          Int      @id @default(autoincrement())
  senderId    Int
  recipientId Int
  message     String
  sender      user     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  recipient   user     @relation("recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
}

model favouriteUsers {
  id              Int      @id @default(autoincrement())
  userId          Int
  favouriteUserId Int
  user            user     @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  favouriteUser   user     @relation("favouriteUser", fields: [favouriteUserId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
}

model favouriteItems {
  id        Int      @id @default(autoincrement())
  userId    Int
  itemId    Int
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  item      item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
